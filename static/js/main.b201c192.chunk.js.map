{"version":3,"sources":["components/AddAppointments.js","components/ListAppointments.js","components/SearchAppointments.js","components/App.js","serviceWorker.js","index.js"],"names":["AddApointments","Component","ListAppointments","className","this","props","appointments","map","item","index","key","petName","aptDate","ownerName","aptNotes","SearchAppointments","App","state","myAppointments","listItemes","data","id","AddAppointments","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAOeA,G,6KAHP,OAAO,mD,GAFcC,cC+BdC,E,uKA5BP,OACI,yBAAKC,UAAU,mCACdC,KAAKC,MAAMC,aAAaC,KAAK,SAACC,EAAKC,GAAN,OAC1B,yBAAKN,UAAU,0BAA0BO,IAAKD,GAC9C,yBAAKN,UAAU,QACb,4BAAQA,UAAU,oCAAlB,MAGF,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,YAAYK,EAAKG,SACjC,0BAAMR,UAAU,oBAAoBK,EAAKI,UAG3C,yBAAKT,UAAU,cACb,0BAAMA,UAAU,cAAhB,WACA,8BAAOK,EAAKK,YAEd,yBAAKV,UAAU,aAAaK,EAAKM,oB,GArBpBb,aCUhBc,E,uKARP,OACI,wD,GAHqBd,a,OC8DlBe,E,kDAvDb,WAAYX,GAAQ,IAAD,uBACjB,cAAMA,IAEDY,MAAQ,CAEVC,eAAgB,IAKnB,IAAMC,EAAaC,EAAKb,KAAI,SAAAC,GAAI,OAC9BA,KAXe,OAajB,EAAKS,MAAMC,eAAiBC,EAbX,E,qDAmCjB,OACE,0BAAMhB,UAAU,gBAAgBkB,GAAG,cACjC,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,aAEb,kBAACmB,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAkBhB,aAAeF,KAAKa,MAAMC,0B,GA7C1CjB,aCIEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b201c192.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass AddApointments extends Component{\n    render(){\n        return <div>Add Apointment</div>\n    }\n}\nexport default AddApointments","import React, { Component } from 'react'\n\nclass ListAppointments extends Component {\n    render() {\n        \n        return (\n            <div className=\"appointment-list item-list mb-3\">\n            {this.props.appointments.map( (item,index )=> (\n                <div className=\"pet-item col media py-3\" key={index}>\n                <div className=\"mr-3\">\n                  <button className=\"pet-delete btn btn-sm btn-danger\">X</button>\n                </div>\n    \n                <div className=\"pet-info media-body\">\n                  <div className=\"pet-head d-flex\">\n                    <span className=\"pet-name\">{item.petName}</span>\n                    <span className=\"apt-date ml-auto\">{item.aptDate}</span>\n                  </div>\n    \n                  <div className=\"owner-name\">\n                    <span className=\"label-item\">Owner: </span>\n                    <span>{item.ownerName}</span>\n                  </div>\n                  <div className=\"apt-notes\">{item.aptNotes}</div>\n                </div>\n              </div>      \n            ))}\n          \n         </div>\n        )\n    }\n}\n\nexport default ListAppointments\n","import React, { Component } from 'react'\n\nclass SearchAppointments extends Component {\n    render() {\n        return (\n            <div>\n                Search Appointments                \n            </div>\n        )\n    }\n}\n\nexport default SearchAppointments\n","import React, { Component } from 'react';\nimport '../css/App.css';\nimport AddAppointments from './AddAppointments'\nimport ListAppointments from './ListAppointments';\nimport SearchAppointments from './SearchAppointments';\nimport data from '../data';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      \n       myAppointments: []\n    };\n    // const apts = result.map(item => {\n    //   return item;\n    // })\n    const listItemes = data.map(item=>(\n      item\n    ));\n    this.state.myAppointments = listItemes\n    \n  }\n\n  // componentDidMount(){\n  //   fetch(data)\n  //   .then(response => response.json())\n  //   .then(result =>{\n  //     const apts = result.map(item => {\n  //       return item;\n  //     })\n  //     this.setState({\n  //       myAppointments: apts\n  //     });\n  //   });\n    \n  // }\n  \n  \n  render(){\n    \n    \n    return (\n      <main className=\"page bg-white\" id=\"petratings\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12 bg-white\">\n              <div className=\"container\">\n                \n                <AddAppointments/>\n                <SearchAppointments/>\n                <ListAppointments appointments ={this.state.myAppointments}/>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}