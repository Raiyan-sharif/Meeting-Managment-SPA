{"version":3,"sources":["components/AddAppointments.js","components/ListAppointments.js","components/SearchAppointments.js","components/App.js","serviceWorker.js","index.js"],"names":["AddApointments","state","petName","ownerName","aptDate","aptTime","aptNotes","handleChange","bind","handleAdd","e","target","value","name","this","setState","preventDefault","tempApt","props","addAppointment","className","formDisplay","onClick","toggleForm","id","noValidate","onSubmit","htmlFor","readOnly","type","placeholder","onChange","rows","cols","Component","ListAppointments","appointments","map","item","index","key","deleteAppointment","date","parse","format","SearchAppointments","App","myAppointments","lastIndex","listItemes","data","apt","tempApts","without","unshift","AddAppointments","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7008b00.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {FaPlus} from 'react-icons/fa';\n\nclass AddApointments extends Component{\n  \n  constructor(){\n    super()\n    this.state={\n      petName: '',\n      ownerName: '',\n      aptDate: '',\n      aptTime: '',\n      aptNotes: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  handleChange(e){\n    const target = e.target;\n    const value = e.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    })\n  }\n  handleAdd(e){\n   e.preventDefault();\n   let tempApt = {\n     petName: this.state.petName,\n     ownerName: this.state.ownerName,\n     aptDate: this.state.aptDate+ ' ' + this.state.aptTime,\n     aptNotes: this.state.aptNotes\n\n   };\n   this.props.addAppointment(tempApt);\n  }\n\n    render(){\n        return (\n            <div className={\n                'card textcenter mt-3 '+\n                (this.props.formDisplay ? '' : 'add-appointment')\n            }>\n            <div className=\"apt-addheading card-header bg-primary text-white\"\n            onClick={this.props.toggleForm}>\n              <FaPlus/> Add Appointment\n            </div>\n  \n            <div className=\"card-body\">\n              <form id=\"aptForm\" noValidate onSubmit={this.handleAdd}>\n                <div className=\"form-group form-row\">\n                  <label\n                    className=\"col-md-2 col-form-label text-md-right\"\n                    htmlFor=\"petName\"\n                    readOnly\n                  >\n                    Pet Name\n                  </label>\n                  <div className=\"col-md-10\">\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"petName\"\n                      placeholder=\"Pet's Name\"\n                      value={this.state.petName}\n                      onChange={this.handleChange}\n                    />\n                  </div>\n                </div>\n  \n                <div className=\"form-group form-row\">\n                  <label\n                    className=\"col-md-2 col-form-label text-md-right\"\n                    htmlFor=\"ownerName\"\n                  >\n                    Pet Owner\n                  </label>\n                  <div className=\"col-md-10\">\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"ownerName\"\n                      placeholder=\"Owner's Name\"\n                      value={this.state.ownerName}\n                      onChange={this.handleChange}\n                    />\n                  </div>\n                </div>\n  \n                <div className=\"form-group form-row\">\n                  <label\n                    className=\"col-md-2 col-form-label text-md-right\"\n                    htmlFor=\"aptDate\"\n                  >\n                    Date\n                  </label>\n                  <div className=\"col-md-4\">\n                    <input\n                      type=\"date\"\n                      className=\"form-control\"\n                      name=\"aptDate\"\n                      id=\"aptDate\"\n                      value={this.state.aptDate}\n                      onChange={this.handleChange}\n                    />\n                  </div>\n                  <label\n                    className=\"col-md-2 col-form-label text-md-right\"\n                    htmlFor=\"aptTime\"\n                  >\n                    Time\n                  </label>\n                  <div className=\"col-md-4\">\n                    <input\n                      type=\"time\"\n                      className=\"form-control\"\n                      name=\"aptTime\"\n                      id=\"aptTime\"\n                      value={this.state.aptTime}\n                      onChange={this.handleChange}\n                    />\n                  </div>\n                </div>\n  \n                <div className=\"form-group form-row\">\n                  <label className=\"col-md-2 text-md-right\" htmlFor=\"aptNotes\">\n                    Apt. Notes\n                  </label>\n                  <div className=\"col-md-10\">\n                    <textarea\n                      className=\"form-control\"\n                      rows=\"4\"\n                      cols=\"50\"\n                      name=\"aptNotes\"\n                      id=\"aptNotes\"\n                      placeholder=\"Appointment Notes\"\n                      value={this.state.aptNotes}\n                      onChange={this.handleChange}\n                    />\n                  </div>\n                </div>\n  \n                <div className=\"form-group form-row mb-0\">\n                  <div className=\"offset-md-2 col-md-10\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-primary d-block ml-auto\"\n                    >\n                      Add Appointment\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        )\n    }\n}\nexport default AddApointments","import React, { Component } from 'react';\nimport Moment from 'react-moment';\n \nclass ListAppointments extends Component {\n    render() {\n        \n        return (\n            <div className=\"appointment-list item-list mb-3\">\n            {this.props.appointments.map( (item,index )=> (\n                <div className=\"pet-item col media py-3\" key={index}>\n                <div className=\"mr-3\">\n                  <button className=\"pet-delete btn btn-sm btn-danger\"\n                  onClick={()=> this.props.deleteAppointment(item)}>\n                    X\n                  </button>\n                </div>\n    \n                <div className=\"pet-info media-body\">\n                  <div className=\"pet-head d-flex\">\n                    <span className=\"pet-name\">{item.petName}</span>\n                    <span className=\"apt-date ml-auto\">\n                    <Moment\n                    date={item.aptDate}\n                    parse=\"YYYY-MM-dd hh:mm\"\n                    format=\"MMM-D h:mma\"\n                    />\n                    </span>\n                  </div>\n    \n                  <div className=\"owner-name\">\n                    <span className=\"label-item\">Owner: </span>\n                    <span>{item.ownerName}</span>\n                  </div>\n                  <div className=\"apt-notes\">{item.aptNotes}</div>\n                </div>\n              </div>      \n            ))}\n          \n         </div>\n        )\n    }\n}\n\nexport default ListAppointments\n","import React, { Component } from 'react'\n\nclass SearchAppointments extends Component {\n    render() {\n        return (\n            <div>\n                Search Appointments                \n            </div>\n        )\n    }\n}\n\nexport default SearchAppointments\n","import React, { Component } from 'react';\nimport '../css/App.css';\nimport AddAppointments from './AddAppointments'\nimport ListAppointments from './ListAppointments';\nimport SearchAppointments from './SearchAppointments';\nimport data from '../data';\nimport {without} from 'lodash';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      \n       myAppointments: [],\n       formDisplay: false,\n       lastIndex: 0\n    };\n    \n    // const apts = result.map(item => {\n    //   return item;\n    // })\n    const listItemes = data.map(item=>(\n      item\n    ));\n    this.state.myAppointments = listItemes\n    this.deleteAppointment = this.deleteAppointment.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.addAppointment = this.addAppointment.bind(this);\n  }\n  toggleForm(){\n    this.setState({\n      formDisplay: !this.state.formDisplay\n    });\n  }\n  deleteAppointment(apt){\n    let tempApts = this.state.myAppointments;\n    tempApts = without(tempApts,apt);\n    this.setState({\n      myAppointments: tempApts\n    }\n    )\n  }\n  addAppointment(apt){\n    let tempApts = this.state.myAppointments;\n    \n    tempApts.unshift(apt);\n    this.setState({\n      myAppointments: tempApts\n     \n    });\n  }\n  // componentDidMount(){\n  //   fetch(data)\n  //   .then(response => response.json())\n  //   .then(result =>{\n  //     const apts = result.map(item => {\n  //       return item;\n  //     })\n  //     this.setState({\n  //       myAppointments: apts\n  //     });\n  //   });\n    \n  // }\n  \n  \n  render(){\n    \n    \n    return (\n      <main className=\"page bg-white\" id=\"petratings\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12 bg-white\">\n              <div className=\"container\">\n                \n                <AddAppointments \n                formDisplay={this.state.formDisplay}\n                toggleForm={this.toggleForm}\n                addAppointment = {this.addAppointment}\n                />\n                <SearchAppointments/>\n                <ListAppointments appointments ={this.state.myAppointments}\n                deleteAppointment={this.deleteAppointment}/>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}